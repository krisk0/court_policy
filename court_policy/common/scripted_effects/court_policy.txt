# Called by AI once in five years, by player any time
court_policy_cfg = {
	# landed character should have capital province, but do it carefully

	capital_province ?= {
		save_scope_as = court
		# scope:court exists for court_policy.01 and all court_policy_ effects
	}

	if = {
		limit = { exists = scope:court }

		if = {
			# Lazy garbage collection, happens only for indepenedent rulers who
			#  chose to change their policy
			limit = { is_independent_ruler = yes }
			# remove vars from baronies that are no longer capitals
			court_policy_garbage_collection = yes
			# if garbage collection somehow fails, then some provinces might
			#  have 5 unused variables each, not a big memory leak
		}

		# don't set defaults if vars already set
		if = {
			limit = {
				scope:court = {
					NOT = {
						AND = {
							has_variable = court_policy_fm_sex
							has_variable = court_policy_homosexual
							has_variable = court_policy_incest
							has_variable = court_policy_heal_lycanthrope
							has_variable = court_policy_heal_vampire
						}
					}
				}
			}
			# set defaults depending on faith
			court_policy_cfg_from_faith = yes
		}

		if = {
			limit = { is_ai = no }
			trigger_event = court_policy.01
		}
		else_if = {
			limit = { ai_rationality >= high_positive_rationality }

			# highly rational choose to not heal good diseases
			court_policy_cfg_rational = yes
		}
		else_if = {
			# slightly rational leave defaults as they are, stupid set all to 50%
			if = {
				limit = { ai_rationality <= high_negative_rationality }
				court_policy_cfg_stupid = yes
			}
		}
	}
}

court_policy_cfg_from_faith = {
	scope:court = {
		set_variable = {
			name = court_policy_fm_sex
			value = prev.court_policy_fm_sex
		}

		set_variable = {
			name = court_policy_homosexual
			value = prev.court_policy_homosexual
		}
		# Test shows that max = var:court_policy_fm_sex does not work, trying if instead
		if = {
			limit = { var:court_policy_fm_sex < var:court_policy_homosexual }
			set_variable = {
				name = court_policy_homosexual
				value = var:court_policy_fm_sex
			}
		}

		set_variable = {
			name = court_policy_incest
			value = prev.court_policy_incest
		}
		if = {
			limit = { var:court_policy_fm_sex < var:court_policy_incest }
			set_variable = {
				name = court_policy_incest
				value = var:court_policy_fm_sex
			}
		}

		# cannot easily assign variable to value returned by scripted_trigger
		set_variable = court_policy_heal_lycanthrope
		if = {
			limit = {
				NOT = {
					prev = { court_policy_heal_lycanthrope = yes }
				}
			}
			set_variable = {
				name = court_policy_heal_lycanthrope
				value = no
			}
		}

		set_variable = court_policy_heal_vampire
		if = {
			limit = {
				NOT = {
					prev = { court_policy_heal_vampire = yes }
				}
			}
			set_variable = {
				name = court_policy_heal_vampire
				value = no
			}
		}
	}
}

court_policy_cfg_rational = {
	scope:court = {
		set_variable = {
			name = court_policy_heal_lycanthrope
			value = no
		}
		set_variable = {
			name = court_policy_heal_vampire
			value = no
		}
	}
}

court_policy_cfg_stupid = {
	scope:court = {
		set_variable = {
			name = court_policy_fm_sex
			value = 50
		}
		set_variable = {
			name = court_policy_homosexual
			value = 50
		}
		set_variable = {
			name = court_policy_incest
			value = 50
		}
		#random_bool = { WHAT = court_policy_heal_lycanthrope }
		# does not work, or I don't know how to implement. Writing stupid code

		set_variable = court_policy_heal_lycanthrope
		random = {
			chance = 50
			set_variable = {
				name court_policy_heal_lycanthrope
				value = no
			}
		}

		set_variable = court_policy_heal_vampire
		random = {
			chance = 50
			set_variable = {
				name court_policy_heal_vampire
				value = no
			}
		}
	}
}

court_policy_toggle = {
	if = {
		limit = { $WHAT$ = 0 }
		scope:court = {
			court_policy_toggle_integer = { WHAT = court_policy_fm_sex }
		}
	}
	else_if = {
		limit = { $WHAT$ = 1 }
		scope:court = {
			court_policy_toggle_integer = {
				WHAT = court_policy_homosexual
			}
		}
	}
	else_if = {
		limit = { $WHAT$ = 2 }
		scope:court = {
			court_policy_toggle_integer = { WHAT = court_policy_incest }
		}
	}
	else_if = {
		limit = { $WHAT$ = 3 }
		scope:court = {
			court_policy_toggle_bool = { WHAT = court_policy_heal_lycanthrope }
		}
	}
	else_if = {
		limit = { $WHAT$ = 4 }
		scope:court = {
			court_policy_toggle_bool = { WHAT = court_policy_heal_vampire }
		}
	}
}

court_policy_toggle_integer = {
	change_variable = {
		name = $WHAT$
		add = 50
	}
	if = {
		limit = { var:$WHAT$ > 100 }
		set_variable = {
			name = $WHAT$
			value = 0
		}
	}
}

court_policy_toggle_bool = {
	if = {
		limit = { var:$WHAT$ = yes }
		set_variable = {
			name = $WHAT$
			value = no
		}
	}
	else = {
		set_variable = $WHAT$
	}
}

# Garbage collection once every 5 years. Complexity: O(baronies count)
court_policy_garbage_collection = {
	every_realm_province = {
		limit = {
			has_variable = court_policy_fm_sex
			NOT = { is_a_capital = yes }
		}
		remove_variable = court_policy_fm_sex
		remove_variable ?= court_policy_homosexual
		remove_variable ?= court_policy_incest
		remove_variable ?= court_policy_heal_lycanthrope
		remove_variable ?= court_policy_heal_vampire
	}
}

# They say unused scripts are not loaded to memory. Thus no need to comment-out
#  the script.
court_policy_dump_baronies = {
	capital_county.title_province = {
		prev.capital_province = {
			court_policy_show_province = yes
		}
	}
	error_log = "that was capital, now other provinces"
	every_realm_province = {
		# all provinces including capital
		court_policy_show_province = yes
	}
}

court_policy_show_province = {
	province_owner ?= { error_log = court_policy_owner_is }
	error_log = court_policy_province_is
	if = {
		limit = { has_variable = court_policy_fm_sex }
		error_log = "has variable"
	}
	else = {
		error_log = "no variable"
	}
	if = {
		limit = { is_a_capital = yes }
		error_log = "is a capital"
	}
	else = {
		error_log = "is not a capital"
	}
}

#set_variable = {
#    name = title_id_num
#    value = title:This.GetName  # Returns internal numeric ID ?
#}

# Runs in context of sick character.
# Scope value:
#  scope:disease_type
# Either triggers health.2201, or health.3101, or does nothing.
#
# Unlanded character w/o liege gets no treatment. If liege forbids, no
#  treatment.
court_policy_maybe_heal = {
	if = {
		limit = { scope:disease_type = flag:sanies_lupinus }
		error_log = "_maybe_heal: got sanies_lupinus"
	}
	else_if = {
		limit = { scope:disease_type = flag:sanguinare_vampiris }
		error_log = "_maybe_heal: got sanguinare_vampiris"
	}
	else = {
		error_log = "_maybe_heal: unknown disease"
	}
	if = {
		# No physician, no treatment
		limit = { court_physician_available_trigger = yes }
		error_log = "_maybe_heal: got physician"
		save_scope_as = sick_character
		save_court_physician_as_effect = { SCOPE_NAME = physician }
		# TODO: if has_good_disease_treatment_trigger, then maybe heal sanies_lupinus
		#  or sanguinare_vampiris
		if = {
			limit = {
				is_landed = yes
				court_policy_heal_em = yes
			}
			error_log = "_maybe_heal: landed"
			# health.3101: choose healing variant for yourself.
			trigger_event = health.3101
		}
		else = {
			liege ?= {
				# Physician and liege exist, physician is available.
				# health.2201: liege decides if he wants the courtier healed.
				error_log = "_maybe_heal: unlanded"
				trigger_event = health.2201
			}
		}
	}
}

court_policy_contract_disease = {
	# TREATMENT_EVENT = yes, so contract_disease_effect might start healing with
	#  event chain:
	#
	#  contract_disease_effect -> health.3100 -> court_policy_maybe_heal ->
	#   .3101 or .2201 or nothing
	#
	#  The chain is delayed (by up to 250 days), so we force court_policy_maybe_heal
	#   right now

	contract_disease_effect = { DISEASE = $DISEASE$ TREATMENT_EVENT = yes }

	if = {
		# The disease might not be contracted, if root is immune
		limit = {
			has_trait = $DISEASE$
		}
		save_scope_value_as = {
			name = disease_type
			value = flag:$DISEASE$
		}
		# Either do nothing, or trigger event health.3101 or health.2201
		court_policy_maybe_heal = yes
	}
}
