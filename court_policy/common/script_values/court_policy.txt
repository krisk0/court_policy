# return 100 or 50 0, 100 = yes of course, 50 = maybe, 0 = never
court_policy_fm_sex = {
	faith = {
		if = {
			limit = {
				has_doctrine = doctrine_adultery_men_accepted
				has_doctrine = doctrine_adultery_women_accepted
			}
			add = 100
		}
		else_if = {
			limit = {
				OR = {
					has_doctrine = doctrine_adultery_men_accepted
					has_doctrine = doctrine_adultery_men_shunned
				}
				OR = {
					has_doctrine = doctrine_adultery_women_accepted
					has_doctrine = doctrine_adultery_women_shunned
				}
			}
			add = 50
		}
	}
}

court_policy_homosexual = {
	faith = {
		if = {
			limit = {
				has_doctrine = doctrine_homosexuality_accepted
			}
			add = 100
		}
		else_if = {
			limit = {
				has_doctrine = doctrine_homosexuality_shunned
			}
			add = 50
		}
	}
}

# simplification: only check if unrestricted incest allowed
court_policy_incest = {
	faith = {
		if = {
			limit = {
				has_doctrine_parameter = consanguinity_unrestricted_incest
			}
			add = 100
		}
	}
}

# Runs in liege context. Available scopes:
#  scope:owner
#  scope:target
#  scope:target_liege
#  scope:capital -- capital barony
# Returns 100 if liege allows, 0 if liege disallows, 50 if undecided
# Simplification: distant relative sex is allowed
court_policy_liege_attitude_to_adultery = {
	if = {
		limit = {
		  scope:owner = { is_close_family_of = scope:target }
		}
		value = court_policy_liege_a2a_related
		if = {
			# if homosexuality is forbidden, return zero
			limit = { is_same_sex_as = yes }
			max = court_policy_liege_a2a_samesex
		}
	}
	else_if = {
		limit = { is_same_sex_as = yes }
		value = court_policy_liege_a2a_samesex
	}
	else = {
		value = court_policy_liege_a2a_general
	}
}


# Same as above, but adultery_spouse instead of owner and sex_partner instead
#  of target
court_policy_liege_attitude_to_adultery_4001 = {
	if = {
		limit = {
		  scope:adultery_spouse = { is_close_family_of = scope:sex_partner }
		}
		value = court_policy_liege_a2a_related
		if = {
			# if homosexuality is forbidden, return zero
			limit = { is_same_sex_as_4001 = yes }
			max = court_policy_liege_a2a_samesex
		}
	}
	else_if = {
		limit = { is_same_sex_as_4001 = yes }
		value = court_policy_liege_a2a_samesex
	}
	else = {
		value = court_policy_liege_a2a_general
	}
}


court_policy_liege_a2a_general = {
	capital_province = {
		if = {
			limit = { has_variable = court_policy_fm_sex }
			value = var:court_policy_fm_sex
		}
		else = {
			# The variable is unset, use default value suggested by faith
			value = prev.court_policy_fm_sex
		}
	}
}

court_policy_liege_a2a_samesex = {
	capital_province = {
		if = {
			limit = { has_variable = court_policy_homosexual }
			value = var:court_policy_homosexual
		}
		else = {
			# The variable is unset, use default value suggested by faith
			value = prev.court_policy_homosexual
		}
	}
}

court_policy_liege_a2a_related = {
	capital_province = {
		if = {
			limit = { has_variable = court_policy_incest }
			value = var:court_policy_incest
		}
		else = {
			# The variable is unset, use default value suggested by faith
			value = prev.court_policy_incest
		}
	}
}

# Called from health.1007 to calculate weight multiplier
court_policy_cancer_value = {
	value = ek_human_age_equivalent
	save_temporary_value_as = my_age
	# default for 40yo : 1
	value = 1
	if = {
		# 0.1 if age < 25
		limit = { scope:my_age < 25 }
		value = 0.1
	}
	else_if = {
		# 0.3 in range 25..35
		limit = { scope:my_age < 35 }
		value = 0.3
	}
	# stays 1 if age < 55, might change if >= 55
	else_if = {
		limit = { scope:my_age >= 55 }
		if = {
			# female, age >= 55: factor of 2
			limit = { is_female = yes }
			value = 2
		}
		else_if = {
			# male, age > 55: factor of 3
			limit = { scope:my_age > 55 }
			value = 3
		}
		# multiply by 2 if >= 65
		if = {
			limit = { scope:my_age >= 65 }
			multiply = 2
		}
		# multiply by 2 if >= 70
		if = {
			limit = { scope:my_age >= 70 }
			multiply = 2
		}
	}
}

# return compassion divided by 4, that should be hopefully -15 to 15 for most
#  characters
court_policy_compassion_for_vampire = {
	value = ai_compassion
	min = -100
	max = 100
	divide = 4
	multiply = -1
}

court_policy_boldness = {
	value = ai_boldness
	min = -100
	max = 100
	divide = 4
}

court_policy_greed = {
	value = ai_greed
	min = -100
	max = 100
	divide = 4
}

court_policy_rationality = {
	value = ai_rationality
	min = -100
	max = 100
	divide = 3
}

court_policy_religion_likes_vampires = {
	# simplification: only check if vampirism is accepted
	value = -20
	if = {
		limit = { faith = { has_doctrine = doctrine_vampirism_accepted } }
		value = 20
	}
	if = {
		limit = { ai_zeal >= high_positive_ai_value }
		multiply = 2
	}
}

# zero add if under 40, else add (age - 40) / 4
court_policy_age_for_vampire = {
	value = ek_human_age_equivalent
	subtract = 40
	min = 0
	divide = 4
}

# Returns chance that root is willing to contract sanguinare_vampiris. EK
#  calculation: 10 + 40 if ambitious in ek_travel_events.4010
court_policy_is_willing_to_become_vampire_chance = {
	if = {
		# immortal cannot become vampire
		limit = {
			OR = {
				is_immortal = yes
				has_trait = sanguinare_vampiris
			}
		}
	}
	else = {
		value = 10
		# ai_... personality modifiers
		add = court_policy_greed
		add = court_policy_boldness
		add = court_policy_religion_likes_vampires
		add = court_policy_compassion_for_vampire
		# has rival => need to live longer
		if = {
			limit = { any_relation = { type = rival } }
			add = 10
		}
		if = {
			limit = { any_relation = { type = nemesis } }
			add = 20
		}
		# getting older => more likely
		add = court_policy_age_for_vampire
		# liege is known to be vampire and root likes him
		if = {
			limit = {
				exists = liege
				knows_about_character_being_vampire_trigger = { CHARACTER = liege }
				opinion = {
					target = liege
					value >= high_positive_opinion
				}
			}
			add = 20
		}
		add = court_policy_vampire_friend_or_

		# Additional modifier (such as child that no one else can care about)
		# Commented out to silence error log
		#if = {
		#	limit = {
		#		exists = scope:court_policy_convince
		#	}
		#	add = scope:court_policy_convince
		#}

		min = 0
		max = 100
	}
}

# Returns number between 0 and 100, more if a relative/friend/lover with good
#  attitude is known as vampire
court_policy_vampire_friend_or_ = {
	if = {
		limit = {
			any_close_family_member = {
				root = {
					opinion = { target = prev value >= high_positive_opinion }
					knows_about_character_being_vampire_trigger = { CHARACTER = prev }
				}
			}
		}
		add = 30
	}
	if = {
		limit = {
			any_relation = {
				type = soulmate
				root = {
					knows_about_character_being_vampire_trigger = { CHARACTER = prev }
				}
			}
		}
		add = 40
	}
	if = {
		limit = {
			any_relation = {
				type = lover
				root = {
					knows_about_character_being_vampire_trigger = { CHARACTER = prev }
				}
			}
		}
		add = 20
	}
	if = {
		limit = {
			any_relation = {
				type = friend
				root = {
					opinion = { target = prev value >= high_positive_opinion }
					knows_about_character_being_vampire_trigger = { CHARACTER = prev }
				}
			}
		}
		add = 25
	}
	max = 100
}
